# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  docker: circleci/docker@2.0.2
  
jobs:
  build-docker:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: $DOCKER_LOGIN/flaskapi
          tag: ${CIRCLE_WORKFLOW_ID:0:7}
      - docker/push:
          digest-path: /tmp/digest.txt
          image: $DOCKER_LOGIN/flaskapi
          tag: ${CIRCLE_WORKFLOW_ID:0:7}
          #registry: docker.io/$DOCKER_LOGIN
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch   

    working_directory: ~/udacity-devops-capstone-proj5

    steps:
      - checkout:
          path: ~/udacity-devops-capstone-proj5
      
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}      
            make lint
      - run:
          name: Run Lint
          command: |
            . venv/bin/activate
            make lint
  test:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch   

    working_directory: ~/udacity-devops-capstone-proj5

    steps:
      - checkout:
          path: ~/udacity-devops-capstone-proj5
      - run:
          name: Run pytest
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            make test
  create-eks-cluster:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Install kubectl for eksctl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl /usr/bin/
            echo "kubectl: $(kubectl version --client)"
      - run:
          name: Install eksctl and create eks cluster
          command: |
            #curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C ./
            chmod +x ./eksctl
            mv ./eksctl /usr/bin/
            echo "eksctl: $(eksctl version)"
            export CLUSTER_NAME='my-cluster'
            mkdir -p ./kube
            touch ./kube/config
            echo "created kube dir"
            if eksctl get cluster --region=ap-south-1 | grep $CLUSTER_NAME
            then
              echo "***EKS cluster already exists in aws"
              echo "writing kubeconfig to ./kube for the existing cluster"
              eksctl utils write-kubeconfig --cluster $CLUSTER_NAME --region $AWS_DEFAULT_REGION --kubeconfig './kube/config'
              echo "printing kube/config"
              #cat ./kube/config
              cd ./kube ls
            else
              eksctl create cluster --config-file=./kubernetes/cluster.yaml
              ls
              cp /root/.kube/* ./kube
              echo "printing kube/config"
              #cat ./kube/config
              cd ./kube
              ls
            fi
      - run:
          name: Deploy app to k8s eks cluster
          command: |
            cd ./kube
            kubectl cluster-info dump
            #kubectl get deployments
            #cat config
            #envsubst < ~/project/kubernetes/aws-k8s-deployment.yaml | kubectl apply -f -
      - persist_to_workspace:
          root: ~/
          paths:
            - project/kube
            
  deploy-k8s:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - attach_workspace:
          at: ~/
      # install envsubst
      - run: yum install -y gettext
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl /usr/bin/
            echo "kubectl: $(kubectl version --client)"
      - run:
          name: Deploy app to k8s
          command: |
            cd ./kube
            cat config
            envsubst < ~/project/kubernetes/aws-k8s-deployment.yaml | kubectl apply -f -
            kubectl get deployments
            
          
          
workflows:
  default:
    jobs:
      - build:
          filters:
            branches:
              only: [branch]
      - test:
          requires:
            - build
      - build-docker:
          requires:
            - test
      - create-eks-cluster
          #requires:
            #- build-docker
      #- deploy-k8s:
          #requires:
            #- create-eks-cluster
